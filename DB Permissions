-- Script version : Ver 1.0.0
-- Desc : Consolidate script for database User and User Permission for multiple databases.
-- Created By : Jayvant 2013-07-21
-- Below are the steps for the script. 

-- 1. Set Result to -> Result to text option
-- 2. Specify database name in scalar variable with comma-delimited (,) @varDBName for e.g  set @varDBName = 'db1,db2,db2'.
-- 3. execute script on master database.
-- 4. Save script output in file.

set nocount on
use [master]

declare @varDBName varchar(max)

set @varDBName = ''


create table tdb(dbname varchar(250) null)
create table thelpuser( UserName sysname  null  ,RoleName sysname   null ,LoginName sysname   null ,DefDBName sysname   null ,DefSchemaName sysname  null ,UserID smallint   null ,SID smallint null )


DECLARE @var1 varchar(255)
declare @var2 varchar(255)
set @var2 = @varDBName

while charindex(',',@var2) <> 0
begin
	select @var1=substring(@var2,1,(charindex(',',@var2)-1))
	if isnull(@var1,'') <>''
		insert into tdb(dbname) values(@var1)
SET @var2 = substring(@var2,charindex(',',@var2)+1,len(@var2))
end
if isnull(@var2,'') <>''
	insert into tdb(dbname) values(@var2)


declare @dbname varchar(255)
declare @varScript varchar(max)

print '------------------------------- User script for ' + @varDBName + ' database(s) -------------------------------------------'
print ''

declare curM cursor static for
	select dbname from tdb order by dbname

open curM 
fetch next from curM into @dbname

while @@FETCH_STATUS = 0
	begin 
		
		set @varScript = 'truncate table master.dbo.thelpuser'
		exec (@varScript)
		set @varScript = 'insert into master.dbo.thelpuser exec ['+ @dbname +'].dbo.sp_helpuser '
		exec (@varScript)

		print 'GO'
		print 'USE [' + @dbname + ']'

		select 
			  'IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = '''+ UserName +''')'
			  + char(10) + '	CREATE USER ['+ UserName +']'
			  + case when isnull(case when CHARINDEX('\',UserName ,1) >0 and ISNULL(LoginName,'') = '' then UserName else LoginName end,'') <> '' then
					' FOR LOGIN ['+ case when CHARINDEX('\',UserName ,1) >0 and ISNULL(LoginName,'') = '' then UserName else LoginName end +']'
				else
				 ' WITHOUT LOGIN' end				
			  + case when isnull(DefSchemaName,'') <> '' then ' WITH DEFAULT_SCHEMA=['+ DefSchemaName +']' 	 
			  end 
		from thelpuser		where userid>4 

		fetch next from curM into @dbname
	end

close curM
deallocate curM




print ''
print '-------------------------------- User permission script for ' + @varDBName + ' database(s) --------------------------------'
print ''

----SET NOCOUNT ON


print '--Generates datbase role memberships:'
print ''

declare curM cursor static for
	select dbname from tdb

open curM 
fetch next from curM into @dbname

while @@FETCH_STATUS = 0
	begin 
		print 'GO'
		set @varScript = 'USE [' + @dbname + ']'
		print @varScript
		set @varScript = @varScript + char(10) + 'SELECT ''EXEC sp_addrolemember @rolename ='' 
			  + SPACE(1) + QUOTENAME(USER_NAME(rm.role_principal_id), '''''''') + '', @membername ='' + SPACE(1) + QUOTENAME(USER_NAME(rm.member_principal_id), '''''''') AS ''--Role Memberships''
		FROM  sys.database_role_members AS rm
		WHERE USER_NAME(rm.member_principal_id) IN 
					( Select name from sys.database_principals Where principal_id >=5 And type_desc in (''SQL_USER'',''WINDOWS_USER'',''WINDOWS_GROUP''))
		ORDER BY rm.role_principal_id ASC'
		exec (@varScript)
		fetch next from curM into @dbname
	end

close curM
deallocate curM


print '--Generates Database Level GRANTS:'
print ''

declare curM cursor static for
	select dbname from tdb

open curM 
fetch next from curM into @dbname

while @@FETCH_STATUS = 0
	begin 
		print 'GO'
		set @varScript = 'USE [' + @dbname + ']'
		print @varScript

		set @varScript = @varScript + char(10) + 'SELECT  CASE WHEN perm.state <> ''W'' THEN perm.state_desc ELSE ''GRANT'' END
			  + SPACE(1) + perm.permission_name + SPACE(1)
			  + SPACE(1) + ''TO'' + SPACE(1) + QUOTENAME(usr.name) COLLATE database_default
			  + CASE WHEN perm.state <> ''W'' THEN SPACE(0) ELSE SPACE(1) + ''WITH GRANT OPTION'' END AS ''--Database Level Permissions''
		FROM  sys.database_permissions AS perm
			  INNER JOIN sys.database_principals AS usr ON perm.grantee_principal_id = usr.principal_id
		WHERE usr.name IN ( Select name from sys.database_principals Where principal_id >=5 And type_desc in (''SQL_USER'',''WINDOWS_USER'',''WINDOWS_GROUP'')) 
		and perm.class_desc <> ''OBJECT_OR_COLUMN''
		ORDER BY perm.permission_name ASC, perm.state_desc ASC'

		exec (@varScript)
		
		fetch next from curM into @dbname
	end

close curM
deallocate curM


print '--Generates Object or column level grants:'
print ''

declare curM cursor static for
	select dbname from tdb

open curM 
fetch next from curM into @dbname

while @@FETCH_STATUS = 0
	begin 
		print 'GO'
		set @varScript = 'USE [' + @dbname + ']'
		print @varScript

		set @varScript = @varScript + char(10) +   '  SELECT  CASE WHEN perm.state <> ''W'' THEN perm.state_desc ELSE ''GRANT'' END + SPACE(1) + perm.permission_name + SPACE(1) + ''ON '' + QUOTENAME(USER_NAME(obj.schema_id)) + ''.'' + QUOTENAME(obj.name) 
				  + CASE WHEN cl.column_id IS NULL THEN SPACE(0) ELSE ''('' + QUOTENAME(cl.name) + '')'' END  + SPACE(1) + ''TO'' + SPACE(1) + QUOTENAME(usr.name) COLLATE database_default + CASE WHEN perm.state <> ''W'' THEN SPACE(0) ELSE SPACE(1) + ''WITH GRANT OPTION'' END AS ''--Object Level Permissions'' 
			FROM  sys.database_permissions AS perm
				  INNER JOIN sys.objects AS obj ON perm.major_id = obj.[object_id]
				  INNER JOIN sys.database_principals AS usr ON perm.grantee_principal_id = usr.principal_id
				  LEFT JOIN sys.columns AS cl ON cl.column_id = perm.minor_id AND cl.[object_id] = perm.major_id
			WHERE usr.name IN ( Select name from sys.database_principals Where principal_id >=5 And type_desc in (''SQL_USER'',''WINDOWS_USER'',''WINDOWS_GROUP'')) 
			ORDER BY perm.permission_name ASC, perm.state_desc ASC'

		exec (@varScript)

		fetch next from curM into @dbname
	end

close curM
deallocate curM


drop table thelpuser
drop table tdb

